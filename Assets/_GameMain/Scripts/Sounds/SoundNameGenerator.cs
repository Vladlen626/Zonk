#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Text;
using System.Collections.Generic;

public static class SoundNamesGenerator
{
    private const string FilePath = "_GameMain/Scripts/Sounds/SoundNames.cs";
    private const string HeaderTemplate = @"// --------------------------------------------------------
// Auto-generated by SoundNamesGenerator
// DO NOT EDIT MANUALLY!
// --------------------------------------------------------

public static class SoundNames
{{
{0}
}}";

    // ReSharper disable Unity.PerformanceAnalysis
    [MenuItem("Tools/Audio/Generate Sound Names", priority = 200)]
    public static void Generate()
    {
        var audioManager = Object.FindObjectOfType<AudioManager>();
        if (audioManager == null)
        {
            Debug.LogError("AudioManager not found in scene!");
            return;
        }

        var sb = new StringBuilder();
        var usedNames = new HashSet<string>();

        foreach (var sound in audioManager.Sounds)
        {
            if (string.IsNullOrEmpty(sound.name)) continue;

            // Генерация валидного имени константы
            string constantName = ConvertToConstantName(sound.name);
            
            // Обработка дубликатов
            string finalName = constantName;
            int counter = 1;
            while (usedNames.Contains(finalName))
            {
                finalName = $"{constantName}_{counter++}";
            }
            usedNames.Add(finalName);

            sb.AppendLine($"    public const string {finalName} = \"{sound.name}\";");
        }

        string fullPath = Path.Combine(Application.dataPath, FilePath);
        Directory.CreateDirectory(Path.GetDirectoryName(fullPath));
        File.WriteAllText(fullPath, string.Format(HeaderTemplate, sb.ToString()));
        AssetDatabase.Refresh();

        Debug.Log($"<color=green>SoundNames generated successfully!</color> {usedNames.Count} sounds processed.", audioManager);
    }

    private static string ConvertToConstantName(string input)
    {
        // Удаляем все недопустимые символы
        var cleanName = new StringBuilder();
        foreach (char c in input)
        {
            if (char.IsLetterOrDigit(c) || c == '_')
            {
                cleanName.Append(c);
            }
            else if (c == ' ')
            {
                cleanName.Append('_');
            }
        }

        // Делаем первую букву заглавной
        if (cleanName.Length > 0 && char.IsLower(cleanName[0]))
        {
            cleanName[0] = char.ToUpper(cleanName[0]);
        }

        return cleanName.ToString();
    }
}
#endif